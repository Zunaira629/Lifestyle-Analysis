{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Name:- Zunaira Asif \n",
    "\n",
    "This project studies how lifestyle & demographic factors affect students' final Grades(G3) using Linear Regression.  \n",
    "\n",
    "The dataset includes age,family, background, study time,health, alcohol & consumption etc.\n",
    "\n",
    "Notebook Covers:-\n",
    "\n",
    "1-Data exploration & Cleaning \n",
    "\n",
    "2-Encoding Categorical variables \n",
    "\n",
    "3-Feature scaling \n",
    "\n",
    "4-Train_Test_Split\n",
    "\n",
    "5-Linear Regression  Modeling \n",
    "\n",
    "6-Model Training \n",
    "\n",
    "7-Model Prediction\n",
    "\n",
    "8-Model Evaluation (MSE & R2)\n",
    "\n",
    "9- Visualization of actual & predicted grades(G3) & residuals\n",
    "\n",
    "\n",
    "It's beginner friendly example ,well_explained  demonstration showing which factor influence  student's performance in python.\n",
    "\n",
    "Each step is clearly explained for easy understanding , from data exploration and cleaning to modeling , evaluation and visualization!!!\n",
    "\n",
    " Results::-  MSE≈0.24 | R2≈0.78 → Model predicts students' Final Grades reasonably well!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Files in zip: ['student-mat.csv', 'student-por.csv', 'student-merge.R', 'student.txt']\n",
      "  school sex  age address famsize Pstatus  Medu  Fedu     Mjob      Fjob  ...  \\\n",
      "0     GP   F   18       U     GT3       A     4     4  at_home   teacher  ...   \n",
      "1     GP   F   17       U     GT3       T     1     1  at_home     other  ...   \n",
      "2     GP   F   15       U     LE3       T     1     1  at_home     other  ...   \n",
      "3     GP   F   15       U     GT3       T     4     2   health  services  ...   \n",
      "4     GP   F   16       U     GT3       T     3     3    other     other  ...   \n",
      "\n",
      "  famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
      "0      4        3      4     1     1      3        6   5   6   6  \n",
      "1      5        3      3     1     1      3        4   5   5   6  \n",
      "2      4        3      2     2     3      3       10   7   8  10  \n",
      "3      3        2      2     1     1      5        2  15  14  15  \n",
      "4      4        3      2     1     2      5        4   6  10  10  \n",
      "\n",
      "[5 rows x 33 columns]\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 395 entries, 0 to 394\n",
      "Data columns (total 33 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   school      395 non-null    object\n",
      " 1   sex         395 non-null    object\n",
      " 2   age         395 non-null    int64 \n",
      " 3   address     395 non-null    object\n",
      " 4   famsize     395 non-null    object\n",
      " 5   Pstatus     395 non-null    object\n",
      " 6   Medu        395 non-null    int64 \n",
      " 7   Fedu        395 non-null    int64 \n",
      " 8   Mjob        395 non-null    object\n",
      " 9   Fjob        395 non-null    object\n",
      " 10  reason      395 non-null    object\n",
      " 11  guardian    395 non-null    object\n",
      " 12  traveltime  395 non-null    int64 \n",
      " 13  studytime   395 non-null    int64 \n",
      " 14  failures    395 non-null    int64 \n",
      " 15  schoolsup   395 non-null    object\n",
      " 16  famsup      395 non-null    object\n",
      " 17  paid        395 non-null    object\n",
      " 18  activities  395 non-null    object\n",
      " 19  nursery     395 non-null    object\n",
      " 20  higher      395 non-null    object\n",
      " 21  internet    395 non-null    object\n",
      " 22  romantic    395 non-null    object\n",
      " 23  famrel      395 non-null    int64 \n",
      " 24  freetime    395 non-null    int64 \n",
      " 25  goout       395 non-null    int64 \n",
      " 26  Dalc        395 non-null    int64 \n",
      " 27  Walc        395 non-null    int64 \n",
      " 28  health      395 non-null    int64 \n",
      " 29  absences    395 non-null    int64 \n",
      " 30  G1          395 non-null    int64 \n",
      " 31  G2          395 non-null    int64 \n",
      " 32  G3          395 non-null    int64 \n",
      "dtypes: int64(16), object(17)\n",
      "memory usage: 102.0+ KB\n",
      "Categorical Columns: Index(['school', 'sex', 'address', 'famsize', 'Pstatus', 'Mjob', 'Fjob',\n",
      "       'reason', 'guardian', 'schoolsup', 'famsup', 'paid', 'activities',\n",
      "       'nursery', 'higher', 'internet', 'romantic'],\n",
      "      dtype='object')\n",
      "Numerical Columns: Index(['age', 'Medu', 'Fedu', 'traveltime', 'studytime', 'failures', 'famrel',\n",
      "       'freetime', 'goout', 'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2',\n",
      "       'G3'],\n",
      "      dtype='object')\n",
      "\n",
      "Missing values:\n",
      " <bound method DataFrame.isnull of     school sex  age address famsize Pstatus  Medu  Fedu      Mjob      Fjob  \\\n",
      "0       GP   F   18       U     GT3       A     4     4   at_home   teacher   \n",
      "1       GP   F   17       U     GT3       T     1     1   at_home     other   \n",
      "2       GP   F   15       U     LE3       T     1     1   at_home     other   \n",
      "3       GP   F   15       U     GT3       T     4     2    health  services   \n",
      "4       GP   F   16       U     GT3       T     3     3     other     other   \n",
      "..     ...  ..  ...     ...     ...     ...   ...   ...       ...       ...   \n",
      "390     MS   M   20       U     LE3       A     2     2  services  services   \n",
      "391     MS   M   17       U     LE3       T     3     1  services  services   \n",
      "392     MS   M   21       R     GT3       T     1     1     other     other   \n",
      "393     MS   M   18       R     LE3       T     3     2  services     other   \n",
      "394     MS   M   19       U     LE3       T     1     1     other   at_home   \n",
      "\n",
      "     ... famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
      "0    ...      4        3      4     1     1      3        6   5   6   6  \n",
      "1    ...      5        3      3     1     1      3        4   5   5   6  \n",
      "2    ...      4        3      2     2     3      3       10   7   8  10  \n",
      "3    ...      3        2      2     1     1      5        2  15  14  15  \n",
      "4    ...      4        3      2     1     2      5        4   6  10  10  \n",
      "..   ...    ...      ...    ...   ...   ...    ...      ...  ..  ..  ..  \n",
      "390  ...      5        5      4     4     5      4       11   9   9   9  \n",
      "391  ...      2        4      5     3     4      2        3  14  16  16  \n",
      "392  ...      5        5      3     3     3      3        3  10   8   7  \n",
      "393  ...      4        4      1     3     4      5        0  11  12  10  \n",
      "394  ...      3        2      3     3     3      5        5   8   9   9  \n",
      "\n",
      "[395 rows x 33 columns]>\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>address</th>\n",
       "      <th>famsize</th>\n",
       "      <th>Pstatus</th>\n",
       "      <th>Medu</th>\n",
       "      <th>Fedu</th>\n",
       "      <th>Mjob</th>\n",
       "      <th>Fjob</th>\n",
       "      <th>...</th>\n",
       "      <th>famrel</th>\n",
       "      <th>freetime</th>\n",
       "      <th>goout</th>\n",
       "      <th>Dalc</th>\n",
       "      <th>Walc</th>\n",
       "      <th>health</th>\n",
       "      <th>absences</th>\n",
       "      <th>G1</th>\n",
       "      <th>G2</th>\n",
       "      <th>G3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>18</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>A</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>at_home</td>\n",
       "      <td>teacher</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>at_home</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>8</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>15</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>health</td>\n",
       "      <td>services</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>GP</td>\n",
       "      <td>F</td>\n",
       "      <td>16</td>\n",
       "      <td>U</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>390</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>20</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>391</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>17</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>services</td>\n",
       "      <td>services</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>16</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>392</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>21</td>\n",
       "      <td>R</td>\n",
       "      <td>GT3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>other</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>393</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>18</td>\n",
       "      <td>R</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>services</td>\n",
       "      <td>other</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>394</th>\n",
       "      <td>MS</td>\n",
       "      <td>M</td>\n",
       "      <td>19</td>\n",
       "      <td>U</td>\n",
       "      <td>LE3</td>\n",
       "      <td>T</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>other</td>\n",
       "      <td>at_home</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>395 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    school sex  age address famsize Pstatus  Medu  Fedu      Mjob      Fjob  \\\n",
       "0       GP   F   18       U     GT3       A     4     4   at_home   teacher   \n",
       "1       GP   F   17       U     GT3       T     1     1   at_home     other   \n",
       "2       GP   F   15       U     LE3       T     1     1   at_home     other   \n",
       "3       GP   F   15       U     GT3       T     4     2    health  services   \n",
       "4       GP   F   16       U     GT3       T     3     3     other     other   \n",
       "..     ...  ..  ...     ...     ...     ...   ...   ...       ...       ...   \n",
       "390     MS   M   20       U     LE3       A     2     2  services  services   \n",
       "391     MS   M   17       U     LE3       T     3     1  services  services   \n",
       "392     MS   M   21       R     GT3       T     1     1     other     other   \n",
       "393     MS   M   18       R     LE3       T     3     2  services     other   \n",
       "394     MS   M   19       U     LE3       T     1     1     other   at_home   \n",
       "\n",
       "     ... famrel freetime  goout  Dalc  Walc health absences  G1  G2  G3  \n",
       "0    ...      4        3      4     1     1      3        6   5   6   6  \n",
       "1    ...      5        3      3     1     1      3        4   5   5   6  \n",
       "2    ...      4        3      2     2     3      3       10   7   8  10  \n",
       "3    ...      3        2      2     1     1      5        2  15  14  15  \n",
       "4    ...      4        3      2     1     2      5        4   6  10  10  \n",
       "..   ...    ...      ...    ...   ...   ...    ...      ...  ..  ..  ..  \n",
       "390  ...      5        5      4     4     5      4       11   9   9   9  \n",
       "391  ...      2        4      5     3     4      2        3  14  16  16  \n",
       "392  ...      5        5      3     3     3      3        3  10   8   7  \n",
       "393  ...      4        4      1     3     4      5        0  11  12  10  \n",
       "394  ...      3        2      3     3     3      5        5   8   9   9  \n",
       "\n",
       "[395 rows x 33 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train (296, 41)\n",
      "X_test (99, 41)\n",
      "y_train (296,)\n",
      "y_test (99,)\n",
      "Mean Squared Error:: 0.24085542698623674\n",
      "R2 Score:: 0.7811139641406579\n"
     ]
    },
    {
     "data": {
      "image/png": "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PPbYY5x++ulcf/31fOITn+Cuu+6iqamJWCzWVVv73HPP8fLLLzNmzBgARo4cyapVqwBYtGgRX//615k7dy7vvPMOCxYsYO3atfzrv/4rZWVlvPLKKwBs376ds88+m9tvv73ru7353e9+x7Rp0wB49dVXufvuu/nJT37CE088weuvv048Hsday5lnnsnTTz9NaWkp999/PytXrmTv3r3Mnj2bY445pts829vbOe+881i6dClz5swhmUxSUlJCXV0dDQ0N3H777YDzg6HTFVdcwYUXXkh1dTV33XUXV111Fb/97W8B2LRpE8888wzr1q3jzDPP5Jxzzslqu0vuxONQXw+JBESjUF2t65AUBgXPIgFSX+8EzuXlzt+dr/X1umkFRWftLzg1z1/60pc44YQTeOSRR7ryhHft2tVVy/rJT36yK3De35NPPsnf//73rr+TySQtLS08+eST3H///V3TR48enVXZ5s2bx0EHHcT06dP5/ve/T1NTE4cffjjHHXccAE888QRPPPEEs2bNApwa7tdff52WlhY++9nPUlJSAjipF/t79dVXmTBhAnPmzAEgEon0WZ7nnnuOhx56CIAvfOELXHPNNV3vfeYzn6GoqIjJkyezefPmrNZPckc/5KWQKXgWCZBEwrlRpYtEnOnSP9nWEOdaZ85zt7JYy4MPPshRRx3Vbfrzzz9PaWlpxnl1dHTw3HPPMWLEiAPmN5DeJpYvX05FRUXX301NTd2Wb63l//7f/8uXv/zlbt/78Y9/3OfyBlqmdOnfHzZsWLd5S37ph7wUMuU8iwRINArJZPdpyaQzXYJrwYIF3HbbbV1B4MqVK7P63vz587vSHYCuoHz/6du3bwdg6NCh7NmzZ1DlvOuuu9ixYwcAGzZs4P333+fkk0/m4Ycfpq2tjZaWFh599NEDvnv00UezceNGVqxYAUBLSwt79+5l1KhRtLS09Li8E044oasG/d5772Xu3LkDLrvkViLh/HBPpx/yUigUPIsESHU1NDdDUxN0dDivzc3OdAmu73znO+zZs4fp06czdepUvvOd72T1vVtvvZWGhgamT5/O5MmTu3ru+Pa3v8327duZOnUqM2bMYPny5QBcdtllTJ8+vc8Gg5nMnz+fRYsWcfzxxzNt2jTOOeccWlpamD17Nueddx4zZ87k7LPP5qSTTjrgu8XFxSxdupQrr7ySGTNm8MlPfpJdu3Yxb948/v73v3c1GNx//e6++26mT5/Or371K2655ZYBlVtyTz/kpZCZID3uqqqqsg0NDV4XQ8RTaqQzcGvXrmXSpEleF0PyRPvbPek5z5GIEzg3NyvnWcLFGPOCtbZq/+nKeRYJmFhMNycR8VYs5gTK6T/ka2p0bZLCoOBZRERE+k0/5KVQKedZRERERCRLCp5FRERERLKk4FlEREREJEueBc/GmEONMcuNMWuNMWuMMV/zqiwiIiIiItnwsuZ5L1BjrZ0EHAcsNsZM9rA8IiJ58fDDD2OMYd26dX1+9sc//jE7d+4c8LLuuecerrjiih7fe/zxx4nFYhx99NHMnDmT8847r2tY8O985ztMnz6dmTNnMn/+fDZu3DjgMoiIhIlnwbO1dpO19sXU/1uAtUBl798SEQm+++67j7lz53aNntebwQbPmaxevZorr7yS+vp61q1bx6pVq7jgggt46623ALj66qt5+eWXWbVqFZ/61Keoq6vLeRlERILIFznPxpiJwCzgeW9LIiKSJh6HxYth4ULnNR4f9Cx37NjBs88+y3/8x390C5737dvHN77xDaZNm8b06dO57bbbuPXWW9m4cSPz5s1j3rx5AIwcObLrOw888AAXXXQRAI8++ijHHnsss2bN4rTTTmPz5s29luOHP/wh//Iv/9JtEJEzzzyTk08+GYBI2tjLra2tGGMGve4iImHgefBsjBkJPAj8s7U22cP7lxljGowxDVu2bMl/AUWkMHUOodbYCJWVzmtt7aAD6N/+9recfvrpfOxjH2PMmDG8+OKLANx5550kEglWrlzJyy+/zAUXXMBVV13FwQcfzPLly7uG2M5k7ty5/O1vf2PlypWcf/753Hjjjb1+fs2aNcyePbvXz3zrW9/i0EMP5d5771XNs4hIiqfBszFmKE7gfK+19qGePmOtvdNaW2WtrRo3blx+Cygihau+3hl7uLwcioqc17IyZ/og3HfffZx//vkAnH/++dx3330APPnkk3zlK19hyBBn7KoxY8b0a77r169nwYIFTJs2jZtuuok1a9Zk/d2tW7cyc+ZMPvaxj/GjH/2oa/r111/Pu+++ywUXXMDtt9/er/KIiGTDhQd8rvOytw0D/Aew1lr7/7wqh4hIjxIJSEtdAJy/E4kBz3Lr1q386U9/4pJLLmHixIncdNNNLF26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\n",
      "text/plain": [
       "<Figure size 864x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Impact of Lifestyle Factors on Students' Performance model \n",
    "import pandas as pd \n",
    "import zipfile \n",
    "# Load directly from zip( it's a compressed folder)into dataframe!\n",
    "with zipfile.ZipFile(\"student.zip\", \"r\") as z:\n",
    "    # List all files inside the zip!\n",
    "    print(\"Files in zip:\", z.namelist())\n",
    "    # Now we'll open the file we want (example: student-mat.csv)!\n",
    "    with z.open(\"student-mat.csv\") as f:\n",
    "        # Now Dataframe!\n",
    "       df = pd.read_csv(f, sep=\";\")\n",
    "# It Shows first 5 rows by default!\n",
    "print (df.head())\n",
    "#Shape of data( how many rows and columns it has)\n",
    "df.shape\n",
    "# it shows columns names \n",
    "df.columns\n",
    "# General info (datatypes, missing values)\n",
    "df.info()  \n",
    "# Summary statistics for numeric columns\n",
    "df.describe()  \n",
    "# Check for missing values!\n",
    "df.isnull().sum()\n",
    "# We'll chk how many numeric & categorical columns!\n",
    "cat_col=df.select_dtypes(include=\"object\").columns \n",
    "num_col=df.select_dtypes(exclude=\"object\").columns \n",
    "print (\"Categorical Columns:\",cat_col)\n",
    "print (\"Numerical Columns:\",num_col)\n",
    "# Check for missing values\n",
    "print(\"\\nMissing values:\\n\", df.isnull)\n",
    "# Display the full DataFrame\n",
    "from IPython.display import display\n",
    "display(df)\n",
    "#our data has no null values so,now we'll Encode categorical data!\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
    "#Label Encoding!\n",
    "le = LabelEncoder()\n",
    "df_label = df.copy()\n",
    "for col in cat_col:\n",
    "    df_label[col] = le.fit_transform(df_label[col])\n",
    "#One Hot Encoding!\n",
    "ohe=OneHotEncoder(sparse=False,drop='first')  # drop='first' avoids dummy variable trap\n",
    "df_onehot_array = ohe.fit_transform(df[cat_col])\n",
    "df_onehot=pd.DataFrame(df_onehot_array, columns=ohe.get_feature_names(cat_col))\n",
    "# Combine with numerical columns\n",
    "df_onehot = pd.concat([df[num_col].reset_index(drop=True), df_onehot], axis=1)\n",
    "df_onehot.head(10)\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "scaler=StandardScaler()\n",
    "#Only Scale numerical features \n",
    "scaler_featured=scaler.fit_transform(df_onehot)\n",
    "#Convert back to Dataframe!\n",
    "df_scaled=pd.DataFrame(scaler_featured, columns=df_onehot.columns)        \n",
    "df_scaled.head(10)\n",
    "# Now, we're going to split our data \n",
    "from sklearn.model_selection import train_test_split\n",
    "# Features(X)= all columns except target\n",
    "X=df_scaled.drop('G3',axis=1)\n",
    "#Target(Y or output, which we're going to predict)\n",
    "y=df_scaled['G3']\n",
    "#split into training and testing set,for training we'll use 75% of data & for testing 25% of modeling!\n",
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)\n",
    "#we'll check its shape \n",
    "print(\"X_train\",X_train.shape)\n",
    "print (\"X_test\",X_test.shape)\n",
    "print (\"y_train\",y_train.shape)\n",
    "print (\"y_test\",y_test.shape)\n",
    "#Now , it's time to select model, & we're going to use linear Regression!\n",
    "from sklearn.linear_model import LinearRegression\n",
    "model=LinearRegression()\n",
    "#we're going to train our model\n",
    "model.fit(X_train,y_train)\n",
    "#Now, we're going to predicts on our data set\n",
    "y_pred=model.predict(X_test)\n",
    "# We'll going to evaluate the model\n",
    "from sklearn.metrics import mean_squared_error,r2_score\n",
    "mse=mean_squared_error(y_test,y_pred)\n",
    "r2=r2_score(y_test,y_pred)\n",
    "print(\"Mean Squared Error::\",mse)\n",
    "print(\"R2 Score::\",r2)\n",
    "# Now , we'll see visualization of prediction vs actual values using matpoltlib Library!!!\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "# Create an index for x-axis\n",
    "index = np.arange(len(y_test))\n",
    "plt.figure(figsize=(12,6))\n",
    "#plotting Actual Grades'!\n",
    "plt.scatter(index,y_test,color='red', alpha=0.6, label='Actual G3')\n",
    "# Plotting predicted Grades'!\n",
    "plt.scatter(index,y_pred,color='blue', alpha=0.6, label='Predicted G3')\n",
    "#plotting predicted line!\n",
    "plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='green', linewidth=2, label='Perfect Prediction')\n",
    "plt.xlabel(\"Actual G3\")\n",
    "plt.ylabel(\"predicted G3\")\n",
    "plt.title(\"Actual VS predicted G3(Final Garde's)\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "# Plotting Residuals(shows error for each prediction (R=ActualG3-predictedG3) )separately!\n",
    "residuals = y_test - y_pred\n",
    "plt.figure(figsize=(12,5))\n",
    "plt.hist(residuals, bins=20, color='orange', alpha=0.7)\n",
    "plt.xlabel(\"Residuals (Actual G3- Predicted G3)\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.title(\"Residuals Distribution\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
